AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Checkout serverless api

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  UserPoolArn:
    Type: String
  Version:
    Type: String
    Default: v1

Resources:
  DevAcademyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: DevAcademyApi
      StageName: !Ref Version
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn
            Identity:
              Header: Authorization
        AddDefaultAuthorizerToCorsPreflight: False
            
  getAllSalesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: sales/handlers/get-all.getAllHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: Get all sales from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VendasTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref VendasTable
      Events:
        GetAllSalesResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: sales
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
  getAllSalesLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - getAllSalesFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getAllSalesFunction
      Principal: apigateway.amazonaws.com

  getSaleByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/sales/handlers/get-by-id.getByIdHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: Get sale by id from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VendasTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref VendasTable
      Events:
        GetSaleResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: sales/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
  getSaleByIdLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - getSaleByIdFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getSaleByIdFunction
      Principal: apigateway.amazonaws.com

  createSaleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/sales/handlers/create.createSaleHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: Create sale in dynamodb
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VendasTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref VendasTable
      Events:
        CreateSaleResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: sales
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
  createSaleLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - createSaleFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref createSaleFunction
      Principal: apigateway.amazonaws.com

  getAllProductsMockFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/products/handlers/get-all-mocking.getAllProductsMockHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: All products mock
      Events:
        GetAllProductsMockResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: products/mock
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
  getAllProductsLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - getAllProductsMockFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getAllProductsMockFunction
      Principal: apigateway.amazonaws.com

  getAllProductsUnauthMockFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/products/handlers/get-all-mocking.getAllProductsMockHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: All products mock
      Events:
        GetAllProductsMockResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: /unauth/products/mock
            Method: GET
  getAllProductsUnauthLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - getAllProductsUnauthMockFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getAllProductsUnauthMockFunction
      Principal: apigateway.amazonaws.com

  # GET ALL PRODUCT
  getAllProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: products/handlers/get-all.getAllHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: Get all products from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Environment:
        Variables:
          PRODUCT_TABLE: !Ref ProductsTable
      Events:
        GetAllSalesResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: products
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
  getAllProductsLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - getAllProductsFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getAllProductsFunction
      Principal: apigateway.amazonaws.com
  
  # GET BY ID
  getProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/products/handlers/get-by-id.getByIdHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: Get product by id from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Environment:
        Variables:
          PRODUCT_TABLE: !Ref ProductsTable
      Events:
        GetSaleResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: products/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
  getProductByIdLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - getProductByIdFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getProductByIdFunction
      Principal: apigateway.amazonaws.com
  
  # CREATE
  createProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/products/handlers/create.createProductHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: Create product in dynamodb
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Environment:
        Variables:
          PRODUCT_TABLE: !Ref ProductsTable
      Events:
        CreateSaleResource:
          Type: Api
          Properties:
            RestApiId: !Ref DevAcademyApi
            Path: products
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
  createProductLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - DevAcademyApi
    - createProductFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref createProductFunction
      Principal: apigateway.amazonaws.com

  VendasTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  ProductsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2